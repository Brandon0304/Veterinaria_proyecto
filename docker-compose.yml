version: '3.8'

services:
  # Bases de datos
  postgres-auth:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: vet_auth
      POSTGRES_USER: vet_user
      POSTGRES_PASSWORD: vet_password
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  postgres-clients:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: vet_clients
      POSTGRES_USER: vet_user
      POSTGRES_PASSWORD: vet_password
    volumes:
      - postgres_clients_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"

  postgres-appointments:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: vet_appointments
      POSTGRES_USER: vet_user
      POSTGRES_PASSWORD: vet_password
    volumes:
      - postgres_appointments_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"

  postgres-medical:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: vet_medical
      POSTGRES_USER: vet_user
      POSTGRES_PASSWORD: vet_password
    volumes:
      - postgres_medical_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"

  postgres-billing:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: vet_billing
      POSTGRES_USER: vet_user
      POSTGRES_PASSWORD: vet_password
    volumes:
      - postgres_billing_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"

  postgres-notifications:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: vet_notifications
      POSTGRES_USER: vet_user
      POSTGRES_PASSWORD: vet_password
    volumes:
      - postgres_notifications_data:/var/lib/postgresql/data
    ports:
      - "5437:5432"

  postgres-employees:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: vet_employees
      POSTGRES_USER: vet_user
      POSTGRES_PASSWORD: vet_password
    volumes:
      - postgres_employees_data:/var/lib/postgresql/data
    ports:
      - "5438:5432"

  # Redis para caché y sesiones
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # RabbitMQ para mensajería
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: vet_rabbit
      RABBITMQ_DEFAULT_PASS: vet_rabbit_pass
    ports:
      - "5672:5672"  # AMQP
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  # API Gateway
  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DEBUG=1
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
      - auth-service
    volumes:
      - ./api_gateway:/app

  # Servicio de Autenticación
  auth-service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://vet_user:vet_password@postgres-auth:5432/vet_auth
      - REDIS_URL=redis://redis:6379/1
      - RABBITMQ_URL=amqp://vet_rabbit:vet_rabbit_pass@rabbitmq:5672/
    depends_on:
      - postgres-auth
      - redis
      - rabbitmq
    volumes:
      - ./auth_service:/app

  # Servicio de Clientes y Mascotas  
  clients-pets-service:
    build:
      context: ./clients_pets_service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://vet_user:vet_password@postgres-clients:5432/vet_clients
      - REDIS_URL=redis://redis:6379/2
      - RABBITMQ_URL=amqp://vet_rabbit:vet_rabbit_pass@rabbitmq:5672/
      - AUTH_SERVICE_URL=http://auth-service:8001
    depends_on:
      - postgres-clients
      - redis
      - rabbitmq
      - auth-service
    volumes:
      - ./clients_pets_service:/app

  # Servicio de Citas
  appointments-service:
    build:
      context: ./appointments_service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://vet_user:vet_password@postgres-appointments:5432/vet_appointments
      - REDIS_URL=redis://redis:6379/3
      - RABBITMQ_URL=amqp://vet_rabbit:vet_rabbit_pass@rabbitmq:5672/
      - AUTH_SERVICE_URL=http://auth-service:8001
      - CLIENTS_SERVICE_URL=http://clients-pets-service:8002
      - EMPLOYEES_SERVICE_URL=http://employees-service:8007
    depends_on:
      - postgres-appointments
      - redis
      - rabbitmq
      - auth-service
      - clients-pets-service
    volumes:
      - ./appointments_service:/app

  # Servicio de Historia Clínica
  medical-records-service:
    build:
      context: ./medical_records_service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://vet_user:vet_password@postgres-medical:5432/vet_medical
      - REDIS_URL=redis://redis:6379/4
      - RABBITMQ_URL=amqp://vet_rabbit:vet_rabbit_pass@rabbitmq:5672/
      - AUTH_SERVICE_URL=http://auth-service:8001
      - CLIENTS_SERVICE_URL=http://clients-pets-service:8002
      - APPOINTMENTS_SERVICE_URL=http://appointments-service:8003
    depends_on:
      - postgres-medical
      - redis
      - rabbitmq
      - auth-service
      - clients-pets-service
      - appointments-service
    volumes:
      - ./medical_records_service:/app

  # Servicio de Facturación
  billing-service:
    build:
      context: ./billing_service
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://vet_user:vet_password@postgres-billing:5432/vet_billing
      - REDIS_URL=redis://redis:6379/5
      - RABBITMQ_URL=amqp://vet_rabbit:vet_rabbit_pass@rabbitmq:5672/
      - AUTH_SERVICE_URL=http://auth-service:8001
      - CLIENTS_SERVICE_URL=http://clients-pets-service:8002
      - APPOINTMENTS_SERVICE_URL=http://appointments-service:8003
    depends_on:
      - postgres-billing
      - redis
      - rabbitmq
      - auth-service
      - clients-pets-service
      - appointments-service
    volumes:
      - ./billing_service:/app

  # Servicio de Notificaciones
  notifications-service:
    build:
      context: ./notifications_service
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://vet_user:vet_password@postgres-notifications:5432/vet_notifications
      - REDIS_URL=redis://redis:6379/6
      - RABBITMQ_URL=amqp://vet_rabbit:vet_rabbit_pass@rabbitmq:5672/
      - AUTH_SERVICE_URL=http://auth-service:8001
      - CLIENTS_SERVICE_URL=http://clients-pets-service:8002
      - WHATSAPP_TOKEN=${WHATSAPP_TOKEN}
      - WHATSAPP_PHONE_ID=${WHATSAPP_PHONE_ID}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    depends_on:
      - postgres-notifications
      - redis
      - rabbitmq
      - auth-service
    volumes:
      - ./notifications_service:/app

  # Servicio de Empleados
  employees-service:
    build:
      context: ./employees_service
      dockerfile: Dockerfile
    ports:
      - "8007:8007"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://vet_user:vet_password@postgres-employees:5432/vet_employees
      - REDIS_URL=redis://redis:6379/7
      - RABBITMQ_URL=amqp://vet_rabbit:vet_rabbit_pass@rabbitmq:5672/
      - AUTH_SERVICE_URL=http://auth-service:8001
    depends_on:
      - postgres-employees
      - redis
      - rabbitmq
      - auth-service
    volumes:
      - ./employees_service:/app

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    depends_on:
      - api-gateway
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Worker para tareas asíncronas (Celery)
  celery-worker:
    build:
      context: ./notifications_service
      dockerfile: Dockerfile.worker
    environment:
      - DATABASE_URL=postgresql://vet_user:vet_password@postgres-notifications:5432/vet_notifications
      - RABBITMQ_URL=amqp://vet_rabbit:vet_rabbit_pass@rabbitmq:5672/
      - WHATSAPP_TOKEN=${WHATSAPP_TOKEN}
      - WHATSAPP_PHONE_ID=${WHATSAPP_PHONE_ID}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    depends_on:
      - postgres-notifications
      - rabbitmq
    volumes:
      - ./notifications_service:/app
    command: celery -A notifications worker --loglevel=info

  # Scheduler para tareas programadas (Celery Beat)
  celery-beat:
    build:
      context: ./notifications_service
      dockerfile: Dockerfile.worker
    environment:
      - DATABASE_URL=postgresql://vet_user:vet_password@postgres-notifications:5432/vet_notifications
      - RABBITMQ_URL=amqp://vet_rabbit:vet_rabbit_pass@rabbitmq:5672/
    depends_on:
      - postgres-notifications
      - rabbitmq
    volumes:
      - ./notifications_service:/app
    command: celery -A notifications beat --loglevel=info

  # Monitoreo con Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Visualización con Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

  # Nginx como load balancer (opcional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - frontend

volumes:
  postgres_auth_data:
  postgres_clients_data:
  postgres_appointments_data:
  postgres_medical_data:
  postgres_billing_data:
  postgres_notifications_data:
  postgres_employees_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: vet_clinic_network